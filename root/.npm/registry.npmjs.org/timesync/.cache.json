{"_id":"timesync","_rev":"12-c732e1f8a7d39f3cad06f7ff6ab6a3bc","name":"timesync","description":"Time synchronization between peers","dist-tags":{"latest":"0.3.1"},"versions":{"0.0.1":{"name":"timesync","version":"0.0.1","description":"Time synchronization for peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./timesync.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{},"devDependencies":{},"scripts":{},"gitHead":"6cbbd0dbbf2a862d955268e7a5c4516b39888c9a","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync","_id":"timesync@0.0.1","_shasum":"15e49c65d4d3eaae261ec8467fd2e18a883286b8","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"dist":{"shasum":"15e49c65d4d3eaae261ec8467fd2e18a883286b8","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.0.1.tgz"},"directories":{}},"0.1.0":{"name":"timesync","version":"0.1.0","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./dist/timesync.min.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0","socket.io":"^1.3.2"},"devDependencies":{"6to5ify":"^4.0.0","browserify":"^8.1.1","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"browserify lib/timesync.js -t 6to5ify -s timesync -o dist/timesync.js --no-builtins","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","build":"npm run bundle; npm run minify","watch":"watch 'npm run build' lib"},"gitHead":"d2c653afe59e4342fa31a70d4da9633cce09be6e","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync","_id":"timesync@0.1.0","_shasum":"4ada53cb1e126dfbcab2c191c9f2d6a77fdf4dac","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"dist":{"shasum":"4ada53cb1e126dfbcab2c191c9f2d6a77fdf4dac","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.1.0.tgz"},"directories":{}},"0.2.0":{"name":"timesync","version":"0.2.0","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./dist/timesync.min.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0"},"devDependencies":{"babelify":"^5.0.3","browserify":"^8.1.1","socket.io":"^1.3.2","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"browserify lib/timesync.js -t babelify -s timesync -o dist/timesync.js --no-builtins","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","build":"npm run bundle; npm run minify","watch":"watch 'npm run build' lib"},"gitHead":"63c14dfee7aa03960e3e0770f408b254225d816c","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync#readme","_id":"timesync@0.2.0","_shasum":"bd33d883c86818850288b005a2bb9f38cc81d504","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.2","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"dist":{"shasum":"bd33d883c86818850288b005a2bb9f38cc81d504","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.2.0.tgz"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"directories":{}},"0.2.1":{"name":"timesync","version":"0.2.1","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./dist/timesync.min.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0"},"devDependencies":{"babelify":"^5.0.3","browserify":"^8.1.1","socket.io":"^1.3.2","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"browserify lib/timesync.js -t babelify -s timesync -o dist/timesync.js --bare","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","build":"npm run bundle; npm run minify","watch":"watch 'npm run build' lib"},"gitHead":"735a3ac4cc7eac05b104bb04c6641adb8bfe785f","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync#readme","_id":"timesync@0.2.1","_shasum":"28391be0d0458e457506cc2c008930773673c5a0","_from":".","_npmVersion":"3.8.9","_nodeVersion":"6.2.0","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"dist":{"shasum":"28391be0d0458e457506cc2c008930773673c5a0","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.2.1.tgz"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/timesync-0.2.1.tgz_1464792727742_0.9566786231007427"},"directories":{}},"0.2.2":{"name":"timesync","version":"0.2.2","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./dist/timesync.min.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0"},"devDependencies":{"babelify":"^5.0.3","browserify":"^8.1.1","socket.io":"^1.3.2","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"browserify lib/timesync.js -t babelify -s timesync -o dist/timesync.js --bare","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","build":"npm run bundle; npm run minify","watch":"watch 'npm run build' lib"},"browserify":{"transform":["babelify"]},"gitHead":"4e4053642ad9005fd889e9c1c7792802ce10ecb9","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync#readme","_id":"timesync@0.2.2","_shasum":"114d26c9170b94e441058d131c58294a905f30f6","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.2.0","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"dist":{"shasum":"114d26c9170b94e441058d131c58294a905f30f6","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.2.2.tgz"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/timesync-0.2.2.tgz_1481369803957_0.952563252998516"},"directories":{}},"0.2.3":{"name":"timesync","version":"0.2.3","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./dist/timesync.min.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0"},"devDependencies":{"babelify":"^5.0.3","browserify":"^8.1.1","socket.io":"^1.3.2","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"browserify lib/timesync.js -t babelify -s timesync -o dist/timesync.js --bare","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","build":"npm run bundle; npm run minify","watch":"watch 'npm run build' lib"},"browserify":{"transform":["babelify"]},"gitHead":"89b6e7d8f5ca7f6c6250a25a83ca79eb88799db7","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync#readme","_id":"timesync@0.2.3","_shasum":"9da20ace8115d393dfd5bbfa9eae5fd77af3c89b","_from":".","_npmVersion":"3.10.10","_nodeVersion":"7.2.1","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"dist":{"shasum":"9da20ace8115d393dfd5bbfa9eae5fd77af3c89b","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.2.3.tgz"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/timesync-0.2.3.tgz_1481831043879_0.9266468705609441"},"directories":{}},"0.3.0":{"name":"timesync","version":"0.3.0","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./lib/timesync.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0"},"devDependencies":{"babel-cli":"^6.22.2","babel-preset-es2015":"^6.22.0","babelify":"^5.0.3","browserify":"^8.1.1","socket.io":"^1.3.2","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"mkdir -p dist; browserify src/timesync.js -t babelify -s timesync -o dist/timesync.js --bare","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","compile":"babel -q src/ -d lib/","build":"npm run bundle; npm run minify; npm run compile","watch":"watch 'npm run build' src"},"browserify":{"transform":["babelify"]},"gitHead":"bbaef88a16809839465ce55185b3660179464a05","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync#readme","_id":"timesync@0.3.0","_shasum":"180eff2f3fbae14f35ca0fe3edd1b5c89f97fc2c","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"dist":{"shasum":"180eff2f3fbae14f35ca0fe3edd1b5c89f97fc2c","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.3.0.tgz"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/timesync-0.3.0.tgz_1485376647441_0.9081593004520983"},"directories":{}},"0.3.1":{"name":"timesync","version":"0.3.1","description":"Time synchronization between peers","author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"main":"./lib/timesync.js","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"dependencies":{"body-parser":"^1.11.0","debug":"^2.1.1","express":"^4.11.2","promise":"^6.1.0"},"devDependencies":{"babel-cli":"^6.22.2","babel-preset-es2015":"^6.22.0","babelify":"^5.0.3","browserify":"^8.1.1","socket.io":"^1.3.2","uglify-js":"^2.4.16","watch":"^0.13.0"},"scripts":{"bundle":"mkdir -p dist; browserify src/timesync.js -t babelify -s timesync -o dist/timesync.js --bare","minify":"uglifyjs dist/timesync.js -o dist/timesync.min.js","compile":"babel -q src/ -d lib/","build":"npm run bundle; npm run minify; npm run compile","watch":"watch 'npm run build' src"},"browserify":{"transform":["babelify"]},"gitHead":"aab87c90e643367162c9fe93aaaccb3fe3397853","bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"homepage":"https://github.com/enmasseio/timesync#readme","_id":"timesync@0.3.1","_shasum":"e340e4eca495a0df13ab24df9edd3012e7a6695b","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.8.0","_npmUser":{"name":"josdejong","email":"wjosdejong@gmail.com"},"dist":{"shasum":"e340e4eca495a0df13ab24df9edd3012e7a6695b","tarball":"https://registry.npmjs.org/timesync/-/timesync-0.3.1.tgz"},"maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/timesync-0.3.1.tgz_1491659341296_0.7109385712537915"},"directories":{}}},"readme":"# timesync\n\nTime synchronization between peers.\n\nUsage scenarios:\n\n- **master/slave**: Clients synchronize their time to that of a single server,\n  via either HTTP requests or WebSockets.\n- **peer-to-peer**: Clients are connected in a (dynamic) peer-to-peer network\n  using WebRTC or WebSockets and must converge to a single, common time in the\n  network.\n\n\n# Install\n\nInstall via npm:\n\n```\nnpm install timesync\n```\n\n\n# Usage\n\nA timesync client can basically connect to one server or multiple peers,\nand will synchronize it's time. The synchronized time can be retrieved via\nthe method `now()`, and the client can subscribe to events like `'change'`\nand `'sync'`.\n\n```js\n// create a timesync instance\nvar ts = timesync({\n  server: '...',  // either a single server,\n  peers: [...]    // or multiple peers\n});\n\n// get notified on changes in the offset\nts.on('change', function (offset) {\n  console.log('offset from system time:', offset, 'ms');\n}\n\n// get the synchronized time\nconsole.log('now:', new Date(ts.now()));\n```\n\n\n# Example\n\nHere a full usage example with express.js, showing both server and client side.\n`timesync` has build-in support for requests over http and can be used with\nexpress, a default http server, or other solutions. `timesync` can also be\nused over other transports than http, for example using websockets or webrtc.\nThis is demonstrated in the [advanced examples](/examples/advanced).\n\nMore examples are available in the [/examples](/examples) folder.\n\n**server.js**\n\n```js\nvar express = require('express');\nvar timesyncServer = require('timesync/server');\n\n// create an express app\nvar port = 8081;\nvar app = express();\napp.listen(port);\nconsole.log('Server listening at http://localhost:' + port);\n\n// serve static index.html\napp.get('/', express.static(__dirname));\n\n// handle timesync requests\napp.use('/timesync', timesyncServer.requestHandler);\n```\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- note: for support on older browsers, you will need to load es5-shim and es6-shim -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.0.5/es5-shim.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.23.0/es6-shim.min.js\"></script>\n\n  <script src=\"/timesync/timesync.js\"></script>\n</head>\n<script>\n  // create a timesync instance\n  var ts = timesync.create({\n    server: '/timesync',\n    interval: 10000\n  });\n\n  // get notified on changes in the offset\n  ts.on('change', function (offset) {\n    document.write('changed offset: ' + offset + ' ms<br>');\n  });\n\n  // get synchronized time\n  setInterval(function () {\n    var now = new Date(ts.now());\n    document.write('now: ' + now.toISOString() + ' ms<br>');\n  }, 1000);\n</script>\n</html>\n```\n\n\n# API\n\n## Client\n\n### Construction\n\nAn instance of timesync is created as:\n\n```js\nvar ts = timesync(options);\n```\n\n#### Options\n\nThe following options are available:\n\nName       | Type                   | Default    | Description\n---------- | ---------------------- | ---------- | ----------------------------------------\n`delay`    | `number`               | `1000`     | Delay in milliseconds between every request sent.\n`interval` | `number` or `null`     | `3600000`  | Interval in milliseconds for running a synchronization. Defaults to 1 hour. Set to `null` to disable automatically running synchronizations (synchronize by calling `sync()`).\n`now`      | `function`             | `Date.now` | Function returning the local system time.\n`peers`    | `string[]` or `string` | `[]`       | Array or comma separated string with uri's or id's of the peers to synchronize with. Cannot be used in conjunction with option `server`.\n`repeat`   | `number`               | `5`        | Number of times to do a request to every peer.\n`server`   | `string`               | none       | Url of a single server in case of a master/slave configuration. Cannot be used in conjunction with option `peers`.\n`timeout`  | `number`               | `10000`    | Timeout in milliseconds for requests to fail.\n\n### Methods\n\nName                  | Return type | Description\n--------------------- | ----------- | ----------------------------------\n`destroy()`           | none        | Destroy the timesync instance. Stops automatic synchronization. If timesync is currently executing a synchronization, this synchronization will be finished first.\n`now()`               | `number`    | Get the synchronized time. Returns a timestamp. To create a `Date`, call `new Date(time.now())`.\n`on(event, callback)` | `Object`    | Register a callback handler for an event. Returns the timesync instance. See section [Events](#events) for more information.\n`off(event [, callback])` | `Object`    | Unregister a callback handler for an event. If no callback is provided, all callbacks of this event will be removed. Returns the timesync instance. See section [Events](#events) for more information.\n`sync()`  | none        | Do a synchronization with all peers now.\n\nTo be able to send and receive messages from peers, `timesync` needs a transport. To hook up a transport like a websocket or http requests, one has to override the `send(id, data)` method of the `timesync` instance, and has to call `ts.receive(id, data)` on incoming messages.\n\nName                  | Return type | Description\n--------------------- | ----------- | ----------------------------------\n`send(to, data)`      | none        | Send a message to a peer. `to` is the id of the peer, and `data` a JSON object containing the message.\n`receive(from, data)` | none        | Receive a message from a peer. `from` is the id of the sender, and `data` a JSON object containing the message.\n\n`timesync` sends messages using the JSON-RPC protocol, as described in the section [Protocol](#protocol).\n\n\n### Events\n\n`timesync` emits events when starting and finishing a synchronization, and when the time offset changes. To listen for events:\n\n```js\nts.on('change', function (offset) {\n  console.log('offset changed:', offset);\n});\n```\n\nAvailable events:\n\nName     | Description\n---------| ----------\n`change` | Emitted when the offset is changed. This can only happen during a synchronization. Callbacks are called with the new offset (a number) as argument.\n`error`  | Emitted when an error occurred. Callbacks are called with the the error as argument.\n`sync`   | Emitted when a synchronization is started or finished. Callback are called with a value `'start'` or `'end'` as argument.\n\n\n### Properties\n\nName      | Type     | Description\n--------- | -------- | --------------------------------------------\n`offset`  | `number` | The offset from system time in milliseconds.\n`options` | `Object` | An object holding all options of the timesync instance. One can safely adjust options like `peers` at any time. Not all options can be changed after construction, for example a changed `interval` value will not be applied.\n\n\n## Server\n\n`timesync` comes with a build in server to serve as a master for time synchronization. Clients can adjust their time to that of the server. The server basically just implements a POST request responding with it's current time, and serves the static files `timesync.js` and `timesync.min.js` from the `/dist` folder. It's quite easy to implement this request handler yourself, as is demonstrated in the [advanced examples](/examples/advanced).\n\nThe protocol used by the server is described in the section [Protocol](#protocol).\n\n### Load\n\nThe server can be loaded in node.js as:\n\n```js\nvar timesyncServer = require('timesync/server');\n```\n\n### Methods\n\nName                          | Return type  | Description\n----------------------------- | ------------ | ----------------------------------\n`createServer()`              | `http.Server`| Create a new, dedicated http Server. This is just a shortcut for doing `http.createServer( timesyncServer.requestHandler )`.\n`attachServer(server, [path])`| `http.Server`| Attach a request handler for time synchronization requests to an existing http Server. Argument `server` must be an instance of `http.Server`. Argument `path` is optional, and is `/timesync` by default.\n\n\n### Properties\n\nName              | Type       | Description\n----------------- | ---------- | --------------------------------------------\n`requestHandler`  | `function` | A default request handler, handling requests for the timesync server. Signature is `requestHandler(request, response)`. This handler can be used to attach to an expressjs server, or to create a plain http server by doing `http.createServer( timesyncServer.requestHandler )`.\n\n\n# Protocol\n\n`timesync` sends messages using the JSON-RPC protocol. A peer sends a message:\n\n```json\n{\"jsonrpc\": \"2.0\", \"id\": \"12345\", \"method\": \"timesync\"}\n```\n\nThe receiving peer replies with the same id and it's current time:\n\n```json\n{\"jsonrpc\": \"2.0\", \"id\": \"12345\", \"result\": 1423151204595}\n```\n\nThe sending peer matches the returned message by id and uses the result to adjust it's offset.\n\n\n# Algorithm\n\n`timesync` uses a simple synchronization protocol aimed at the gaming industry, and extends this for peer-to-peer networks. The algorithm is described [here](http://www.mine-control.com/zack/timesync/timesync.html):\n\n> A simple algorithm with these properties is as follows:\n>\n> 1. Client stamps current local time on a \"time request\" packet and sends to server\n> 2. Upon receipt by server, server stamps server-time and returns\n> 3. Upon receipt by client, client subtracts current time from sent time and divides by two to compute latency. It subtracts current time from server time to determine client-server time delta and adds in the half-latency to get the correct clock delta. (So far this algothim is very similar to SNTP)\n> 4. The first result should immediately be used to update the clock since it will get the local clock into at least the right ballpark (at least the right timezone!)\n> 5. The client repeats steps 1 through 3 five or more times, pausing a few seconds each time. Other traffic may be allowed in the interim, but should be minimized for best results\n> 6. The results of the packet receipts are accumulated and sorted in lowest-latency to highest-latency order. The median latency is determined by picking the mid-point sample from this ordered list.\n> 7. All samples above approximately 1 standard-deviation from the median are discarded and the remaining samples are averaged using an arithmetic mean.\n\nThis algorithm assumes multiple clients synchronizing with a single server. In case of multiple peers, `timesync` will take the average offset of all peers (excluding itself) as offset.\n\n\n# Resources\n\n- [A Stream-based Time Synchronization Technique For Networked Computer Games](http://www.mine-control.com/zack/timesync/timesync.html)\n- [Network Time Protocol](http://www.wikiwand.com/en/Network_Time_Protocol)\n\n\n# Build\n\nTo build the library:\n\n    npm install\n    npm run build\n\nThis will generate the files `timesync.js` and `timesync.min.js` in the folder `/dist`.\n\nTo automatically build on changes, run:\n\n    npm run watch\n","maintainers":[{"name":"josdejong","email":"wjosdejong@gmail.com"}],"time":{"modified":"2017-04-08T13:49:01.913Z","created":"2015-01-26T13:41:13.295Z","0.0.1":"2015-01-26T13:41:13.295Z","0.1.0":"2015-02-17T11:49:48.430Z","0.2.0":"2015-12-04T07:56:59.237Z","0.2.1":"2016-06-01T14:52:08.942Z","0.2.2":"2016-12-10T11:36:46.258Z","0.2.3":"2016-12-15T19:44:04.681Z","0.3.0":"2017-01-25T20:37:28.181Z","0.3.1":"2017-04-08T13:49:01.913Z"},"homepage":"https://github.com/enmasseio/timesync#readme","keywords":["time","synchronization","ntp","client","server","isomorphic"],"repository":{"type":"git","url":"git://github.com/enmasseio/timesync.git"},"author":{"name":"Jos de Jong","email":"wjosdejong@gmail.com","url":"https://github.com/josdejong"},"bugs":{"url":"https://github.com/enmasseio/timesync/issues"},"readmeFilename":"README.md","users":{"kaerimichi":true,"raiscui":true},"_attachments":{},"_etag":"W/\"58e8ea4d-5f61\"","_lastModified":"Sat, 08 Apr 2017 13:49:01 GMT"}