{"_id":"onoff","_rev":"79-04e1f84acc8665e921ca6903f0d91941","name":"onoff","description":"GPIO access and interrupt detection with Node.js","dist-tags":{"latest":"1.1.2"},"versions":{"0.0.1":{"name":"onoff","version":"0.0.1","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["GPIO","Interrupt","BeagleBone","Raspberry","Linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"_id":"onoff@0.0.1","dist":{"shasum":"68eb8b99b9dffc765ec2d77d2b7cf11c7905fd0c","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.0.1.tgz"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.0":{"name":"onoff","version":"0.1.0","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"_id":"onoff@0.1.0","dist":{"shasum":"a22dd4ddf00c33fe21fe933bf877444143802bda","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.0.tgz"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.2":{"name":"onoff","version":"0.1.2","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"_id":"onoff@0.1.2","dist":{"shasum":"81cd66c531ab7af327fd7cdaf7236be74aefd022","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.3":{"name":"onoff","version":"0.1.3","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"_id":"onoff@0.1.3","dist":{"shasum":"b83ff3641c7ea779ebf340bf323c1dfb9b395953","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.3.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.4":{"name":"onoff","version":"0.1.4","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.1.4","dist":{"shasum":"7e8685c40c86c17148f4a9c21b18d7daeaa11053","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.4.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.1.4.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.1.4.tar.gz","_npmVersion":"1.2.21","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.5":{"name":"onoff","version":"0.1.5","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.1.5","dist":{"shasum":"8b32c6e835754c24cbf7491b453b009e3aff9418","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.5.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.1.5.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.1.5.tar.gz","_npmVersion":"1.2.21","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.6":{"name":"onoff","version":"0.1.6","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"os":["linux"],"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.1.6","dist":{"shasum":"a790602c00f667428ca7622a284ff96ff8480ffb","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.6.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.1.6.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.1.6.tar.gz","_npmVersion":"1.3.2","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.1.7":{"name":"onoff","version":"0.1.7","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1","install":"node-gyp rebuild"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.1.7","dist":{"shasum":"26dfe4e927c379d77533c49de9fa4a4d1bedb95e","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.1.7.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.1.7.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.1.7.tar.gz","_npmVersion":"1.3.8","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.2.0":{"name":"onoff","version":"0.2.0","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.0.2"},"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.2.0","dist":{"shasum":"ed407f8dfbbe642441ba18ea283bef1d9b624bf4","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.2.0.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.2.0.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.2.0.tar.gz","_npmVersion":"1.3.8","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.2.1":{"name":"onoff","version":"0.2.1","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.0.3"},"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.2.1","dist":{"shasum":"32fcf1faeeed53cb29f5e40d05502fd5eee129d5","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.2.1.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.2.1.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.2.1.tar.gz","_npmVersion":"1.3.8","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.2.2":{"name":"onoff","version":"0.2.2","description":"GPIO based I/O and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.0.7"},"keywords":["gpio","embedded","interrupt","interrupts","beaglebone","beagle","bone","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.2.2","dist":{"shasum":"a6e925ac04c95c8e019e5d0d6bd12219be2ff717","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.2.2.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.2.2.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.2.2.tar.gz","_npmVersion":"1.3.8","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.2.3":{"name":"onoff","version":"0.2.3","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.0.8"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.2.3","dist":{"shasum":"6ab68b787015a88edaaf25c25a82892049c681f1","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.2.3.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.2.3.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.2.3.tar.gz","_npmVersion":"1.3.8","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.3.0":{"name":"onoff","version":"0.3.0","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.0"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"_id":"onoff@0.3.0","dist":{"shasum":"185b199fa85ed6ae76007de9d5889d1830b7bd9d","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.3.0.tgz"},"_from":"https://github.com/fivdi/onoff/archive/v0.3.0.tar.gz","_resolved":"https://github.com/fivdi/onoff/archive/v0.3.0.tar.gz","_npmVersion":"1.3.8","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.3.1":{"name":"onoff","version":"0.3.1","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.2"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff","_id":"onoff@0.3.1","dist":{"shasum":"9004e7df54784596040e56bd20d0e512db0ab4c8","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.3.1.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"0.3.2":{"name":"onoff","version":"0.3.2","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.4"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gypfile":true,"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff","_id":"onoff@0.3.2","dist":{"shasum":"bf5c4606e224268ef14f213651b5f1d97d221dcb","tarball":"https://registry.npmjs.org/onoff/-/onoff-0.3.2.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}]},"1.0.0":{"name":"onoff","version":"1.0.0","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.10"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"8f7831e53b96f61b349a3619c7670a822c478e4b","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff","_id":"onoff@1.0.0","_shasum":"91cd5ce058509f10670f93cd6d99ac650a2fcee8","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"91cd5ce058509f10670f93cd6d99ac650a2fcee8","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.0.0.tgz"}},"1.0.1":{"name":"onoff","version":"1.0.1","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.12"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"16c2e804f07034fd49858aa169211b0209f79bd0","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff","_id":"onoff@1.0.1","_shasum":"71b122819113a9d4b89181b2686553acf734ca6d","_from":".","_npmVersion":"2.1.18","_nodeVersion":"1.0.2","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"71b122819113a9d4b89181b2686553acf734ca6d","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.0.1.tgz"}},"1.0.2":{"name":"onoff","version":"1.0.2","description":"GPIO access and interrupt detection on the BeagleBone or Raspberry Pi","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.12"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"8a18a09f7806bda273ca6aaf4ee804d25a98a001","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff","_id":"onoff@1.0.2","_shasum":"131577463e3b785d90a42e3da79cd479ab2ea6e1","_from":".","_npmVersion":"2.1.18","_nodeVersion":"1.0.2","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"131577463e3b785d90a42e3da79cd479ab2ea6e1","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.0.2.tgz"}},"1.0.3":{"name":"onoff","version":"1.0.3","description":"GPIO access and interrupt detection with JavaScript","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"git+https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.16"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"29aab3c149f36569e8f9430a064fb6e5a7f16129","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff#readme","_id":"onoff@1.0.3","_shasum":"241d3f2aabca247f53e4174fdc54504593f7f3b0","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"241d3f2aabca247f53e4174fdc54504593f7f3b0","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.0.3.tgz"}},"1.0.4":{"name":"onoff","version":"1.0.4","description":"GPIO access and interrupt detection with JavaScript","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"git+https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.17"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"e918dccccfd29978b054e49a535269e882a6ba06","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff#readme","_id":"onoff@1.0.4","_shasum":"4630dedb97a110a698d0f16b7f20f6f07f4e6641","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"4630dedb97a110a698d0f16b7f20f6f07f4e6641","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.0.4.tgz"}},"1.1.0":{"name":"onoff","version":"1.1.0","description":"GPIO access and interrupt detection with JavaScript","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"git+https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.17"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"25b72a71982e74dec1c7e40143a6f9fc84146fb0","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff#readme","_id":"onoff@1.1.0","_shasum":"768e9f8ce78ec17a37e96f3598ac7aab5399659b","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"768e9f8ce78ec17a37e96f3598ac7aab5399659b","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.1.0.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/onoff-1.1.0.tgz_1462371813984_0.056938396068289876"}},"1.1.1":{"name":"onoff","version":"1.1.1","description":"GPIO access and interrupt detection with JavaScript","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"git+https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.8.0"},"dependencies":{"epoll":"~0.1.19"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"d653309e3ccbc9e6e7a190ded8418aa6e3a7f620","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff#readme","_id":"onoff@1.1.1","_shasum":"3ed88a8d4c9cc3a58c3e4766d7e9d1bcffb0df3b","_from":".","_npmVersion":"2.15.0","_nodeVersion":"0.10.44","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"3ed88a8d4c9cc3a58c3e4766d7e9d1bcffb0df3b","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.1.1.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/onoff-1.1.1.tgz_1465140688539_0.6314098725561053"}},"1.1.2":{"name":"onoff","version":"1.1.2","description":"GPIO access and interrupt detection with Node.js","main":"onoff.js","directories":{"example":"examples","test":"test"},"scripts":{"test":"echo \"Tests can only be run manually from the command line. They access hardware GPIOs.\" && exit 1"},"repository":{"type":"git","url":"git+https://github.com/fivdi/onoff.git"},"engines":{"node":">=0.10.0"},"dependencies":{"epoll":"~0.1.21"},"keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"author":{"name":"fivdi"},"license":"MIT","gitHead":"5fd2bb6911ed5a293c3f8ec550b1f7be3e88a65c","bugs":{"url":"https://github.com/fivdi/onoff/issues"},"homepage":"https://github.com/fivdi/onoff#readme","_id":"onoff@1.1.2","_shasum":"dcd39d3fd559db2d0df5bcd54d8cc9df1d7747a2","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"fivdi","email":"fivdiweb@gmail.com"},"maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"dist":{"shasum":"dcd39d3fd559db2d0df5bcd54d8cc9df1d7747a2","tarball":"https://registry.npmjs.org/onoff/-/onoff-1.1.2.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/onoff-1.1.2.tgz_1486917978473_0.7145529121626168"}}},"readme":"# onoff \n\nGPIO access and interrupt detection with **Node.js** on Linux boards like the\nRaspberry Pi, C.H.I.P. or BeagleBone.\n\n## Installation\n\n    $ npm install onoff\n\nIf you're using Node.js v4 or higher and seeing lots of compile errors when\ninstalling onoff, it's very likely that gcc/g++ 4.8 or higher are not\ninstalled. See\n[Node.js v4 and native addons](https://github.com/fivdi/onoff/wiki/Node.js-v4-and-native-addons)\nfor details.\n\nIf you're using Node.js v0.10.29 on the Raspberry Pi and seeing a compile\nerror saying that `‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’`\nsee [Node.js v0.10.29 and native addons on the Raspberry Pi](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-Raspberry-Pi).\n\nIf you're using Node.js v0.10.29 on the BeagleBone Black and seeing a compile\nerror saying that `‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’`\nsee [Node.js v0.10.29 and native addons on the BeagleBone Black](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-BeagleBone-Black).\n\n## Usage\n\nAssume that there's an LED on GPIO #14 and a momentary push button on GPIO #4.\n\n<img src=\"https://raw.githubusercontent.com/fivdi/onoff/master/examples/light-switch.png\">\n\nWhen the button is pressed the LED should turn on, when it's released the LED\nshould turn off. This can be achieved with the following code:\n\n```js\nvar Gpio = require('onoff').Gpio,\n  led = new Gpio(14, 'out'),\n  button = new Gpio(4, 'in', 'both');\n\nbutton.watch(function(err, value) {\n  led.writeSync(value);\n});\n```\n\nHere two Gpio objects are being created. One called led for the LED on GPIO #14\nwhich is an output, and one called button for the momentary push button on\nGPIO #4 which is an input. In addition to specifying that the button is an\ninput, the constructors optional third argument is used to specify that 'both'\nrising and falling interrupt edges should be configured for the button GPIO as\nboth button presses and releases should be handled.\n\nAfter everything has been setup correctly, the buttons watch method is used to\nspecify a callback function to execute every time the button is pressed or\nreleased. The value argument passed to the callback function represents the\nstate of the button which will be 1 for pressed and 0 for released. This value\nis used by the callback to turn the LED on or off using its writeSync method.\n\nWhen the above program is running it can be terminated with ctrl-c. However,\nit doesn't free its resources. It also ignores the err argument passed to\nthe callback. Here's a slightly modified variant of the program that handles\nctrl-c gracefully and bails out on error. The resources used by the led and\nbutton Gpio objects are released by calling their unexport method.\n\n```js\nvar Gpio = require('onoff').Gpio,\n  led = new Gpio(14, 'out'),\n  button = new Gpio(4, 'in', 'both');\n\nbutton.watch(function (err, value) {\n  if (err) {\n    throw err;\n  }\n\n  led.writeSync(value);\n});\n\nprocess.on('SIGINT', function () {\n  led.unexport();\n  button.unexport();\n});\n```\n\n## How does it work?\n\nInternally onoff uses sysfs files located at /sys/class/gpio to access GPIOs\nand the [epoll module](https://github.com/fivdi/epoll) to detect hardware\ninterrupts. The Linux GPIO sysfs interface for userspace is documented\n[here](https://www.kernel.org/doc/Documentation/gpio/sysfs.txt).\nIt's a relatively simple interface which can be used to ask the Linux kernel\nto export control of a GPIO to userspace. After control of a GPIO has been\nexported to userspace, the GPIO can be configured as an input or output.\nThereafter, the state of an input can be read, and the state of an output can\nbe written. Some systems will also allow the state of a output to be read.\nThe GPIO sysfs interface can also be used for interrupt detection. onoff can\ndetect several thousand interrupts per second on both the BeagleBone and the\nRaspberry Pi.\n\n## API\n\n### Class Gpio\n\n  * [Gpio(gpio, direction [, edge] [, options]) - Constructor](https://github.com/fivdi/onoff#gpiogpio-direction--edge--options)\n  * [read([callback]) - Read GPIO value asynchronously](https://github.com/fivdi/onoff#readcallback)\n  * [readSync() - Read GPIO value synchronously](https://github.com/fivdi/onoff#readsync)\n  * [write(value[, callback]) - Write GPIO value asynchronously](https://github.com/fivdi/onoff#writevalue-callback)\n  * [writeSync(value) - Write GPIO value synchronously](https://github.com/fivdi/onoff#writesyncvalue)\n  * [watch(callback) - Watch for hardware interrupts on the GPIO](https://github.com/fivdi/onoff#watchcallback)\n  * [unwatch([callback]) - Stop watching for hardware interrupts on the GPIO](https://github.com/fivdi/onoff#unwatchcallback)\n  * [unwatchAll() - Remove all watchers for the GPIO](https://github.com/fivdi/onoff#unwatchall)\n  * [direction() - Get GPIO direction](https://github.com/fivdi/onoff#direction)\n  * [setDirection(direction) - Set GPIO direction](https://github.com/fivdi/onoff#setdirectiondirection)\n  * [edge() - Get GPIO interrupt generating edge](https://github.com/fivdi/onoff#edge)\n  * [setEdge(edge) - Set GPIO interrupt generating edge](https://github.com/fivdi/onoff#setedgeedge)\n  * [activeLow() - Get GPIO activeLow setting](https://github.com/fivdi/onoff#activelow)\n  * [setActiveLow(invert) - Set GPIO activeLow setting](https://github.com/fivdi/onoff#setactivelowinvert)\n  * [unexport() - Reverse the effect of exporting the GPIO to userspace](https://github.com/fivdi/onoff#unexport)\n\n##### Gpio(gpio, direction [, edge] [, options])\n- gpio - An unsigned integer specifying the GPIO number.\n- direction - A string specifying whether the GPIO should be configured as an\ninput or output. The valid values are: 'in', 'out', 'high', and 'low'. If 'out'\nis specified the GPIO will be configured as an output and the value of the GPIO\nwill be set to 0. 'high' and 'low' are variants of 'out' that configure the\nGPIO as an output with an initial level of 1 or 0 respectively.\n- [edge] - An optional string specifying the interrupt generating edge or\nedges for a GPIO input. The valid values are: 'none', 'rising', 'falling' or\n'both'. The default value is 'none' indicating that the GPIO does not generate\ninterrupts. On Linux kernels prior to 3.13 it was possible for both inputs\nand outputs to generate interrupts. The 3.13 kernel dropped support for\ninterrupt generating outputs, irrespective of whether the underlying hardware\nsupports them or not.\n- [options] - An optional options object.\n\nReturns a new Gpio object that can be used to access a GPIO.\n\nThe following options are supported:\n- activeLow - A boolean value specifying whether the values read from or\nwritten to the GPIO should be inverted. The interrupt generating edge for the\nGPIO also follow this this setting. The valid values for activeLow are true\nand false. Setting activeLow to true inverts. Optional, the default value is\nfalse.\n\nGPIOs on Linux are identified by unsigned integers. These are the numbers that\nshould be passed to the onoff Gpio constructor function when exporting GPIOs\nto userspace. For example, pin 8 on the Raspberry Pi P1 expansion header\ncorresponds to GPIO #14 in Raspbian Linux. 14 is therefore the number to pass\nto the onoff Gpio constructor when using pin 8 on the P1 expansion header.\n\n##### read([callback])\n- [callback] - An optional completion callback that gets two arguments (err,\nvalue), where err is reserved for an error object and value is the number 0\nor 1 and represents the state of the GPIO.\n\nRead GPIO value asynchronously.\n\nNote that most systems support readback of GPIOs configured as outputs. The\nread method can therefore be called for any GPIO, irrespective of whether it\nwas configured as an input or an output. The Raspberry Pi and BeagleBone are\nexamples of such systems.\n\n##### readSync()\nRead GPIO value synchronously. Returns the number 0 or 1 to represent the\nstate of the GPIO.\n\nNote that most systems support readback of GPIOs configured as outputs. The\nreadSync method can therefore be called for any GPIO, irrespective of whether\nit was configured as an input or an output. The Raspberry Pi and BeagleBone\nare examples of such systems.\n\n##### write(value[, callback])\n- value - The number 0 or 1.\n- [callback] - An optional completion callback that gets one argument (err),\nwhere err is reserved for an error object.\n\nWrite GPIO value asynchronously.\n\n##### writeSync(value)\n- value - The number 0 or 1.\n\nWrite GPIO value synchronously.\n\n##### watch(callback)\n- callback - A callback that gets two arguments (err, value), where err is\nreserved for an error object and value is the number 0 or 1 and represents the\nstate of the GPIO. The value can also be used to determine whether the\ninterrupt occurred on a rising or falling edge. A value of 0 implies a falling\nedge interrupt and a value of 1 implies a rising edge interrupt.\n\nWatch for hardware interrupts on the GPIO. The edge argument that was passed\nto the constructor determines which hardware interrupts to watch for.\n\n##### unwatch([callback])\n- [callback] - The callback to remove.\n\nStop watching for hardware interrupts on the GPIO. If callback is specified,\nonly that particular callback is removed. Otherwise all callbacks are removed.\n\n##### unwatchAll()\nRemove all hardware interrupt watchers for the GPIO.\n\n##### direction()\nReturns the string 'in' or 'out' indicating whether the GPIO is an input or\noutput.\n\n##### setDirection(direction)\n- direction - A string specifying whether the GPIO should be configured as an\ninput or output. The valid values are 'in' and 'out'.\n\nSet GPIO direction.\n\n##### edge()\nReturns the string 'none', 'falling', 'rising', or 'both' indicating the\ninterrupt generating edge or edges for the GPIO.\n\n##### setEdge(edge)\n- edge - A string specifying the interrupt generating edge or edges for the\nGPIO. The valid values are: 'none', 'rising', 'falling' or 'both'. On Linux\nkernels prior to 3.13 it was possible for both inputs and outputs to generate\ninterrupts. The 3.13 kernel dropped support for interrupt generating outputs,\nirrespective of whether the underlying hardware supports them or not.\n\nSet GPIO interrupt generating edge.\n\n##### activeLow()\nReturns true or false indicating whether or not the values read from or written\nto the GPIO are inverted.\n\n##### setActiveLow(invert)\n- invert - A boolean value specifying whether the values read from or written\nto the GPIO should be inverted. The interrupt generating edge for the GPIO also\nfollow this this setting. The valid values for invert are true and false.\nSetting activeLow to true inverts. Optional, the default value is false.\n\nSet GPIO activeLow setting.\n\n##### unexport()\nReverse the effect of exporting the GPIO to userspace\n\n## Synchronous API\n\nBlink the LED on GPIO #14 for 5 seconds:\n\n```js\nvar Gpio = require('onoff').Gpio, // Constructor function for Gpio objects.\n  led = new Gpio(14, 'out'),      // Export GPIO #14 as an output.\n  iv;\n\n// Toggle the state of the LED on GPIO #14 every 200ms.\n// Here synchronous methods are used. Asynchronous methods are also available.\niv = setInterval(function () {\n  led.writeSync(led.readSync() ^ 1); // 1 = on, 0 = off :)\n}, 200);\n\n// Stop blinking the LED and turn it off after 5 seconds.\nsetTimeout(function () {\n  clearInterval(iv); // Stop blinking\n  led.writeSync(0);  // Turn LED off.\n  led.unexport();    // Unexport GPIO and free resources\n}, 5000);\n```\n\n## Asynchronous API\n\nBlink the LED on GPIO #14 for 5 seconds:\n\n```js\nvar Gpio = require('onoff').Gpio, // Constructor function for Gpio objects.\n  led = new Gpio(14, 'out');      // Export GPIO #14 as an output.\n\n// Toggle the state of the LED on GPIO #14 every 200ms 'count' times.\n// Here asynchronous methods are used. Synchronous methods are also available.\n(function blink(count) {\n  if (count <= 0) {\n    return led.unexport();\n  }\n\n  led.read(function (err, value) { // Asynchronous read.\n    if (err) {\n      throw err;\n    }\n\n    led.write(value ^ 1, function (err) { // Asynchronous write.\n      if (err) {\n        throw err;\n      }\n    });\n  });\n\n  setTimeout(function () {\n    blink(count - 1);\n  }, 200);\n}(25));\n```\n\n## Configuring pullup and pulldown resistors\n\nOn the Raspberry Pi, most GPIOs have either their pull-up or pull-down resistor\nactivated by default. The defaults can be seen in Table 6-31 on pages 102 and\n103 of the\n[BCM2835 ARM Peripherals](http://www.farnell.com/datasheets/1521578.pdf)\ndocumentation.\n\nPullup and pulldown resistors for GPIOs can be configured with device tree\noverlays. The Wiki page\n[Enabling Pullup and Pulldown Resistors on The Raspberry Pi](https://github.com/fivdi/onoff/wiki/Enabling-Pullup-and-Pulldown-Resistors-on-The-Raspberry-Pi)\ndescribes how this can be acheived on the Raspberry Pi.\n\n## Benchmarks\n\nThree of the onoff tests are used to monitor performance:\n\n  * performance-async.js - determine max. no. of write ops per seconds\n  * performance-sync.js - determine max. no. of writeSync ops per second\n  * performance-interrupt.js - determine max. no. of interrupts per second\n\nThe average of ten runs of these tests using various versions of io.js,\nNode.js, and onoff are shown in the following tables.\n\n**Raspberry Pi 3, 1.2Ghz, Raspbian:**\n\nnode | onoff | kernel | write / sec | writeSync / sec | interrupts / sec\n:---: | :---: | :---: | ---: | ---: | ---:\nv5.7.0 | v1.0.4 | 4.1.18-v7+ | 27015 | 294496 | 19262\n\n**Raspberry Pi 2, 900Mhz, Raspbian:**\n\nnode | onoff | kernel | write / sec | writeSync / sec | interrupts / sec\n:---: | :---: | :---: | ---: | ---: | ---:\nv6.0.0 | v1.1.0 | 4.1.18-v7+ | 12333 | 165667 | 9803\nv5.5.0 | v1.0.4 | 4.1.13-v7+ | 12875 | 160655 | 9204\nv4.0.0 | v1.0.2 | 4.1.6-v7+ | 12536 | 138193 | 8375\nv2.3.0 | v1.0.2 | 3.18.11-v7+ | 8896 | 111716 | 6067\nv2.0.2 | v1.0.2 | 3.18.11-v7+ | 8964 | 116785 | 5958\nv1.2.0 | v1.0.0 | 3.18.5-v7+ | 13863 | 171501 | 9268\nv0.10.36 | v1.0.0 | 3.18.5-v7+ | 12010 | 98493 | 9803\n\n**Raspberry Pi, 700Mhz, Raspbian:**\n\nnode | onoff | kernel | write / sec | writeSync / sec | interrupts / sec\n:---: | :---: | :---: | ---: | ---: | ---:\nv5.5.0 | v1.0.4 | 4.1.13+ | 2831 | 32389 | 1653\nv0.11.7 | v0.2.3 | 3.6.11+ | 3355 | 49651 | 2550\nv0.10.8 | v0.2.3 | 3.6.11+ | 2772 | 31825 | 2297\n\n**BeagleBone Black, 1GHz, Ångström v2012.12:**\n\nnode | onoff | kernel | write / sec | writeSync / sec | interrupts / sec\n:---: | :---: | :---: | ---: | ---: | ---:\nv0.11.9 | v0.3.0 | 3.8.13 | 8663 | 110219 | 7154\nv0.11.8 | v0.2.3 | 3.8.13 | 8446 | 100698 | 7323\n\n**BeagleBone, 720MHz, Ångström v2012.12:**\n\nnode | onoff | kernel | write / sec | writeSync / sec | interrupts / sec\n:---: | :---: | :---: | ---: | ---: | ---:\nv0.11.7 | v0.2.3 | 3.8.13 | 6399 | 84334 | 5519\nv0.10.20 | v0.2.3 | 3.8.13 | 4925 | 45713 | 4561\n\n## Adafruit Learning System\n\nFor an introduction to onoff checkout\n[Node.js Embedded Development on the Raspberry Pi](https://learn.adafruit.com/node-embedded-development?view=all)\nat the Adafruit Learning System.\n\n## Additional Information\n\nTested on the following platforms:\n\n- Raspberry Pi 1, 2 and 3\n  - Raspbian\n- C.H.I.P.\n  - Debian\n- BeagleBone and BeagleBone Black\n  - Debian\n\nThe suitability of onoff for a particular Linux board is highly dependent on\nhow GPIO interfaces are made available on that board. The\n[GPIO interfaces](https://www.kernel.org/doc/Documentation/gpio/)\ndocumentation describes GPIO access conventions rather than standards that must\nbe followed so GPIO can vary from platform to platform. For example, onoff\nrelies on sysfs files located at /sys/classes/gpio being available. However,\nthese sysfs files for userspace GPIO are optional and may not be available on a\nparticular platform.\n\n","maintainers":[{"name":"fivdi","email":"fivdiweb@gmail.com"}],"time":{"modified":"2017-04-11T05:26:44.544Z","created":"2012-10-27T14:03:24.159Z","0.0.1":"2012-10-27T14:03:26.816Z","0.1.0":"2012-11-11T22:42:36.361Z","0.1.2":"2013-01-12T17:11:26.662Z","0.1.3":"2013-03-22T15:41:59.880Z","0.1.4":"2013-05-23T22:26:11.896Z","0.1.5":"2013-05-26T08:18:38.857Z","0.1.6":"2013-07-15T18:07:07.495Z","0.1.7":"2013-09-17T18:50:25.431Z","0.2.0":"2013-09-22T20:43:46.845Z","0.2.1":"2013-09-25T19:01:07.151Z","0.2.2":"2013-10-05T09:18:14.173Z","0.2.3":"2013-10-14T19:24:35.796Z","0.3.0":"2013-11-18T21:45:48.542Z","0.3.1":"2014-03-22T20:09:08.684Z","0.3.2":"2014-04-18T14:25:41.959Z","1.0.0":"2015-01-10T01:43:02.639Z","1.0.1":"2015-02-15T22:27:26.948Z","1.0.2":"2015-02-18T21:04:09.627Z","1.0.3":"2015-10-10T20:54:16.665Z","1.0.4":"2016-01-29T19:46:28.926Z","1.1.0":"2016-05-04T14:23:35.384Z","1.1.1":"2016-06-05T15:31:30.190Z","1.1.2":"2017-02-12T16:46:20.714Z"},"author":{"name":"fivdi"},"repository":{"type":"git","url":"git+https://github.com/fivdi/onoff.git"},"users":{"julianduque":true,"messypup":true,"alexd":true,"michalutko":true,"cguzmanceti":true,"ajk":true,"cubiclejockey":true,"judsonmitchell":true,"subso":true,"makenova":true,"meatherly":true,"manewu":true,"jeremyscalpello":true,"louisyeh":true,"craql":true,"superchenney":true,"ray_ye":true,"mobbys":true,"rbultitude":true,"revlis":true,"lepinkainen":true,"joshhodgson":true,"lorenmcconnell":true,"adrienhobbs":true,"nickeltobias":true,"a2kerr":true,"nikolajquorning":true,"nekia":true,"dosevader":true,"guerrerocarlos":true,"crycode":true,"jcaninov":true,"possible_biscuit":true,"chbardel":true,"rafaelquines":true,"lentron":true},"homepage":"https://github.com/fivdi/onoff#readme","keywords":["gpio","embedded","interrupt","beaglebone","bbb","bb","raspberry","raspi","rpi","pi","linux"],"bugs":{"url":"https://github.com/fivdi/onoff/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"W/\"58ec6914-a821\"","_lastModified":"Tue, 11 Apr 2017 05:26:44 GMT"}